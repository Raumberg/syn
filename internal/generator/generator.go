package generator

import (
	"bufio"
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"os/signal"
	"path/filepath"
	"strings"
	"sync"
	"sync/atomic"
	"syscall"
	"time"

	"github.com/briandowns/spinner"
	"github.com/fatih/color"
	"github.com/schollz/progressbar/v3"

	"syn/internal/client"
	"syn/internal/models"
	"syn/internal/processor"
)

// DatasetGenerator –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç
type DatasetGenerator struct {
	Config         *models.Config
	Client         *client.LLMClient
	ProcessorMgr   *processor.Manager
	InputDataset   *models.GenericDataset
	OutputDataset  *models.GenericDataset
	Shutdown       atomic.Bool
	ProcessedCount atomic.Int32
	progressBar    *progressbar.ProgressBar
	spinner        *spinner.Spinner
	successCount   atomic.Int32
	errorCount     atomic.Int32
}

// NewDatasetGenerator —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞
func NewDatasetGenerator(config *models.Config, client *client.LLMClient) *DatasetGenerator {
	g := &DatasetGenerator{
		Config:        config,
		Client:        client,
		ProcessorMgr:  processor.NewManager(),
		InputDataset:  models.NewGenericDataset(),
		OutputDataset: models.NewGenericDataset(),
		Shutdown:      atomic.Bool{},
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã
	g.RegisterProcessors()

	return g
}

// RegisterProcessors —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã
func (g *DatasetGenerator) RegisterProcessors() {
	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã
	g.ProcessorMgr.Register(processor.NewIdentityProcessor())

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º LLM –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞ —Å processorID = "llm"
	for _, mapping := range g.Config.Fields.Input {
		if mapping.ProcessorID == "llm" {
			proc := processor.NewLLMProcessor(
				"llm_"+mapping.InputField,
				g.Client,
				g.Config.API.Model,
				g.Config.Prompt.System,
				"", // –ü—É—Å—Ç–æ–π —à–∞–±–ª–æ–Ω –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∞–º–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
				g.Config.Processing.Temperature,
			)
			g.ProcessorMgr.Register(proc)
		}
	}

	// –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
	if g.Config.Processing.Filter.Enabled {
		filterProc := processor.NewFilterProcessor(
			g.Config.Processing.Filter.Field,
			g.Config.Processing.Filter.MinValue,
			g.Config.Processing.Filter.MaxValue,
			"",                                  // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π
			g.Config.Processing.Filter.Operator, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
		)
		g.ProcessorMgr.Register(filterProc)
	}

	// –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Hugging Face, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
	if g.Config.HuggingFace.Enabled {
		hfProc := processor.NewHuggingFaceProcessor(
			"huggingface",
			g.Config.HuggingFace.PythonPath,
			os.TempDir(),
			g.Config.HuggingFace.DatasetName,
			g.Config.HuggingFace.Split,
			g.Config.HuggingFace.Streamable,
			g.Config.HuggingFace.Filters,
			g.Config.HuggingFace.Fields,
		)
		g.ProcessorMgr.Register(hfProc)
	}
}

// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞—Ç–∞—Å–µ—Ç–∞
func (g *DatasetGenerator) Run(ctx context.Context) error {
	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)

	ctx, cancel := context.WithCancel(ctx)
	defer cancel()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
	g.spinner = spinner.New(spinner.CharSets[14], 100*time.Millisecond)
	g.spinner.Suffix = " –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è..."
	g.spinner.Color("cyan")

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
	go func() {
		select {
		case <-sigChan:
			if g.spinner.Active() {
				g.spinner.Stop()
			}
			if g.progressBar != nil {
				_ = g.progressBar.Close()
			}

			fmt.Println(color.YellowString("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É..."))
			g.Shutdown.Store(true)
			cancel()
		case <-ctx.Done():
		}
	}()

	g.spinner.Start()

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
	var err error
	if g.Config.HuggingFace.Enabled {
		datasetName := color.CyanString(g.Config.HuggingFace.DatasetName)
		g.spinner.Suffix = fmt.Sprintf(" –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ %s...", datasetName)
		err = g.loadDatasetFromHF(ctx)
	} else {
		fileName := color.CyanString(filepath.Base(g.Config.IO.InputFile))
		g.spinner.Suffix = fmt.Sprintf(" –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ %s...", fileName)
		err = g.loadDataset()
	}

	if err != nil {
		g.spinner.Stop()
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ö–æ–¥–Ω–æ–π –¥–∞—Ç–∞—Å–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω
	if g.InputDataset == nil || g.InputDataset.Len() == 0 {
		g.spinner.Stop()
		return fmt.Errorf("–≤—Ö–æ–¥–Ω–æ–π –¥–∞—Ç–∞—Å–µ—Ç –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞—Ç–∞—Å–µ—Ç–∞
	data := g.InputDataset.GetData()
	total := len(data)

	g.spinner.Stop()

	successColor := color.New(color.FgGreen).SprintFunc()
	errorColor := color.New(color.FgRed).SprintFunc()

	fmt.Printf("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞—Ç–∞—Å–µ—Ç–∞ –∏–∑ %s –∑–∞–ø–∏—Å–µ–π\n\n", successColor(fmt.Sprintf("%d", total)))

	// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
	g.progressBar = progressbar.NewOptions(total,
		progressbar.OptionEnableColorCodes(true),
		progressbar.OptionShowCount(),
		progressbar.OptionShowIts(),
		progressbar.OptionSetItsString("–∑–∞–ø–∏—Å–µ–π"),
		progressbar.OptionSetWidth(50),
		progressbar.OptionThrottle(65*time.Millisecond),
		progressbar.OptionSetDescription("üß† –û–±—Ä–∞–±–æ—Ç–∫–∞..."),
		progressbar.OptionSetTheme(progressbar.Theme{
			Saucer:        "[green]=[reset]",
			SaucerHead:    "[green]>[reset]",
			SaucerPadding: " ",
			BarStart:      "[",
			BarEnd:        "]",
		}),
		progressbar.OptionOnCompletion(func() {
			fmt.Printf("\n")
		}),
	)

	if g.Config.Processing.NoLLM {
		// –í —Ä–µ–∂–∏–º–µ –±–µ–∑ LLM –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∞—Ç–∞—Å–µ—Ç
		fmt.Println(color.YellowString("‚ö†Ô∏è –†–µ–∂–∏–º –±–µ–∑ LLM: –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å"))

		// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
		g.progressBar.ChangeMax(1)
		g.progressBar.Describe("üíæ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
		g.OutputDataset.SetData(data)
		g.progressBar.Add(1)

		err = g.saveDataset()
		return err
	}

	err = g.processDataset(ctx, data)
	if err != nil {
		fmt.Println(errorColor(fmt.Sprintf("\n‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞: %v", err)))
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	if g.OutputDataset.Len() > 0 {
		if g.progressBar != nil {
			g.progressBar.Finish()
		}

		g.spinner = spinner.New(spinner.CharSets[11], 100*time.Millisecond)
		g.spinner.Suffix = " –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤..."
		g.spinner.Color("cyan")
		g.spinner.Start()

		err = g.saveDataset()
		g.spinner.Stop()

		if err != nil {
			fmt.Println(errorColor(fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞: %v", err)))
		} else {
			fmt.Println()
			fmt.Println("üìä " + successColor("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"))
			fmt.Printf("  ‚úÖ –£—Å–ø–µ—à–Ω–æ: %s\n", successColor(fmt.Sprintf("%d", g.successCount.Load())))
			if g.errorCount.Load() > 0 {
				fmt.Printf("  ‚ùå –û—à–∏–±–æ–∫: %s\n", errorColor(fmt.Sprintf("%d", g.errorCount.Load())))
			}
			fmt.Printf("  üì¶ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: %s –∏–∑ %s\n",
				successColor(fmt.Sprintf("%d", g.ProcessedCount.Load())),
				successColor(fmt.Sprintf("%d", total)))

			outputPath := filepath.Join(g.Config.IO.OutputDir, g.Config.IO.OutputFile)
			fileInfo, err := os.Stat(outputPath)

			fmt.Println()
			fmt.Printf("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ %s", color.CyanString(outputPath))

			if err == nil {
				size := fileInfo.Size()
				sizeStr := humanizeBytes(size)
				fmt.Printf(" (%s)\n", color.GreenString(sizeStr))
			} else {
				fmt.Println()
			}
		}
	} else {
		fmt.Println(errorColor("\n‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"))
	}

	return err
}

// loadDatasetFromHF –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç –∏–∑ Hugging Face
func (g *DatasetGenerator) loadDatasetFromHF(ctx context.Context) error {
	if g.Config.HuggingFace.DatasetName == "" {
		return fmt.Errorf("–Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –¥–∞—Ç–∞—Å–µ—Ç–∞ Hugging Face")
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä Hugging Face
	proc, err := g.ProcessorMgr.Get("huggingface")
	if err != nil {
		return fmt.Errorf("–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä HuggingFace –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: %w", err)
	}

	hfProc, ok := proc.(*processor.HuggingFaceProcessor)
	if !ok {
		return fmt.Errorf("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ HuggingFace")
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏
	if g.Config.HuggingFace.Limit > 0 {
		hfProc.SetLimit(g.Config.HuggingFace.Limit)
	}
	if g.Config.HuggingFace.Offset > 0 {
		hfProc.SetOffset(g.Config.HuggingFace.Offset)
	}
	if g.Config.HuggingFace.Shuffle {
		hfProc.AddExtraArg("shuffle", "True")
		hfProc.AddExtraArg("seed", fmt.Sprintf("%d", g.Config.HuggingFace.Seed))
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
	hfProc.SetDebug(g.Config.Debug)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
	if g.Config.Processing.Filter.Enabled && g.Config.Processing.Filter.Field != "" {
		hfProc.AddNumericFilter(
			g.Config.Processing.Filter.Field,
			g.Config.Processing.Filter.MinValue,
			g.Config.Processing.Filter.MaxValue,
			g.Config.Processing.Filter.Operator,
		)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ø–∏–Ω–Ω–µ—Ä–∞
	if g.spinner != nil && g.spinner.Active() {
		g.spinner.Suffix = fmt.Sprintf(" –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç %s...", color.CyanString(g.Config.HuggingFace.DatasetName))
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
	data, err := hfProc.Process(ctx, nil)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∏–∑ Hugging Face: %w", err)
	}

	items, ok := data.([]map[string]interface{})
	if !ok {
		return fmt.Errorf("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ HuggingFace")
	}

	// –°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç
	g.InputDataset = models.NewGenericDataset()
	g.InputDataset.SetData(items)

	if g.Config.Debug {
		log.Printf("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ %d —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ Hugging Face –¥–∞—Ç–∞—Å–µ—Ç–∞ %s",
			len(items),
			color.CyanString(g.Config.HuggingFace.DatasetName))
	}

	return nil
}

// loadDataset –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞
func (g *DatasetGenerator) loadDataset() error {
	filePath := g.Config.IO.InputFile
	if filePath == "" {
		return fmt.Errorf("–Ω–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º")
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ø–∏–Ω–Ω–µ—Ä–∞
	if g.spinner != nil && g.spinner.Active() {
		g.spinner.Suffix = fmt.Sprintf(" –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª %s...", color.CyanString(filepath.Base(filePath)))
	}

	// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
	data, err := os.ReadFile(filePath)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %w", err)
	}

	// –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –ø–∞—Ä—Å–∏–º –µ–≥–æ
	var items []map[string]interface{}
	ext := strings.ToLower(filepath.Ext(filePath))

	switch ext {
	case ".json":
		// –ü–∞—Ä—Å–∏–º JSON
		if err := json.Unmarshal(data, &items); err != nil {
			// –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç, –Ω–µ –º–∞—Å—Å–∏–≤
			var singleItem map[string]interface{}
			if err := json.Unmarshal(data, &singleItem); err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %w", err)
			}
			items = []map[string]interface{}{singleItem}
		}
	case ".jsonl":
		// –ü–∞—Ä—Å–∏–º JSONL (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ - JSON –æ–±—ä–µ–∫—Ç)
		scanner := bufio.NewScanner(bytes.NewReader(data))
		for scanner.Scan() {
			line := scanner.Text()
			if line == "" {
				continue
			}
			var item map[string]interface{}
			if err := json.Unmarshal([]byte(line), &item); err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ JSONL: %w", err)
			}
			items = append(items, item)
		}
		if err := scanner.Err(); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è JSONL: %w", err)
		}
	default:
		return fmt.Errorf("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: %s, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .json –∏ .jsonl", ext)
	}

	// –°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç
	g.InputDataset = models.NewGenericDataset()
	g.InputDataset.SetData(items)

	if g.Config.Debug {
		log.Printf("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ %d —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ %s",
			len(items),
			color.CyanString(filepath.Base(filePath)))
	}

	return nil
}

// processDataset –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
func (g *DatasetGenerator) processDataset(ctx context.Context, data []map[string]interface{}) error {
	// –°–æ–∑–¥–∞–µ–º –ø—É–ª —Ä–∞–±–æ—á–∏—Ö –≥–æ—Ä—É—Ç–∏–Ω
	var wg sync.WaitGroup
	semaphore := make(chan struct{}, g.Config.Processing.MaxConcurrency)
	resultChan := make(chan map[string]interface{}, g.Config.Processing.MaxConcurrency)
	errChan := make(chan error, 1)
	doneChan := make(chan bool)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	go func() {
		for result := range resultChan {
			if result != nil {
				g.OutputDataset.AddItem(result)
			}
		}
		doneChan <- true
	}()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤
	for i, item := range data {
		if g.Shutdown.Load() {
			break
		}

		wg.Add(1)
		semaphore <- struct{}{}

		go func(index int, item map[string]interface{}) {
			defer wg.Done()
			defer func() { <-semaphore }()

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω
			select {
			case <-ctx.Done():
				return
			default:
			}

			processed, err := g.processItem(ctx, item)
			if err != nil {
				if g.Config.Debug {
					log.Printf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ %d: %v", index, err)
				}
				g.errorCount.Add(1)
				if len(errChan) == 0 {
					select {
					case errChan <- err:
					default:
					}
				}
				return
			}

			if processed != nil {
				resultChan <- processed
				g.successCount.Add(1)
			}

			count := g.ProcessedCount.Add(1)
			if g.progressBar != nil {
				_ = g.progressBar.Set(int(count))
			}
		}(i, item)
	}

	// –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö –≥–æ—Ä—É—Ç–∏–Ω
	wg.Wait()
	close(resultChan)

	// –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	<-doneChan

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞
	select {
	case err := <-errChan:
		return err
	default:
		return nil
	}
}

// processItem –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–∞—Ç–∞—Å–µ—Ç–∞
func (g *DatasetGenerator) processItem(ctx context.Context, item map[string]interface{}) (map[string]interface{}, error) {
	// –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
	result := make(map[string]interface{})

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	for _, field := range g.Config.Fields.Input {
		// –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –∏–∑ –≤—Ö–æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
		inputField := field.InputField
		outputField := field.OutputField
		processorID := field.ProcessorID

		// –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤—ã—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –≤—Ö–æ–¥–Ω–æ–≥–æ
		if outputField == "" {
			outputField = inputField
		}

		// –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
		value, exists := item[inputField]
		if !exists {
			if g.Config.Debug {
				log.Printf("‚ö†Ô∏è –ü–æ–ª–µ %s –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ", inputField)
			}
			continue
		}

		// –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
		// –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
		var processed interface{}
		if processorID != "" {
			proc, err := g.ProcessorMgr.Get(processorID)
			if err != nil {
				return nil, fmt.Errorf("–Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä %s: %w", processorID, err)
			}

			// –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
			procCtx, cancel := context.WithTimeout(ctx, 60*time.Second)
			defer cancel()

			processed, err = proc.Process(procCtx, value)
			if err != nil {
				return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—è %s –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º %s: %w", inputField, processorID, err)
			}
		} else {
			// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
			processed = value
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		result[outputField] = processed
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã
	for key, value := range item {
		_, exists := result[key]
		if !exists {
			result[key] = value
		}
	}

	return result, nil
}

// saveDataset —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
func (g *DatasetGenerator) saveDataset() error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
	if g.OutputDataset.Len() == 0 {
		return fmt.Errorf("–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
	}

	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
	outputDir := g.Config.IO.OutputDir
	if err := os.MkdirAll(outputDir, 0755); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ %s: %w", outputDir, err)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
	outputPath := filepath.Join(outputDir, g.Config.IO.OutputFile)

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
	data, err := g.OutputDataset.ToJSON()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: %w", err)
	}

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
	if err := os.WriteFile(outputPath, data, 0644); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª %s: %w", outputPath, err)
	}

	// –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
	fileInfo, err := os.Stat(outputPath)
	if err == nil {
		size := fileInfo.Size()
		sizeStr := humanizeBytes(size)
		if g.Config.Debug {
			log.Printf("üíæ –î–∞—Ç–∞—Å–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ %s (—Ä–∞–∑–º–µ—Ä: %s)",
				color.CyanString(outputPath),
				color.GreenString(sizeStr))
		}
	}

	return nil
}

// humanizeBytes –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –±–∞–π—Ç—ã –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
func humanizeBytes(bytes int64) string {
	const unit = 1024
	if bytes < unit {
		return fmt.Sprintf("%d B", bytes)
	}
	div, exp := int64(unit), 0
	for n := bytes / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %cB", float64(bytes)/float64(div), "KMGTPE"[exp])
}
