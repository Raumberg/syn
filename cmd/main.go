package main

import (
	"context"
	"flag"
	"fmt"
	"log"
	"os"
	"runtime"
	"strings"
	"time"

	"github.com/briandowns/spinner"
	"github.com/fatih/color"

	"syn/internal/client"
	"syn/internal/generator"
	"syn/internal/models"
)

func main() {
	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥
	cyan := color.New(color.FgCyan).SprintFunc()
	green := color.New(color.FgGreen).SprintFunc()
	yellow := color.New(color.FgYellow).SprintFunc()
	red := color.New(color.FgRed).SprintFunc()

	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	configFile := flag.String("config", "", "–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É")

	// API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	baseURL := flag.String("api-url", "", "URL API (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥)")
	apiKey := flag.String("api-key", "", "–ö–ª—é—á API (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥)")
	model := flag.String("model", "", "–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥)")

	// IO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	inputFile := flag.String("input", "", "–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥)")
	outputDir := flag.String("output-dir", "", "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥)")
	outputFile := flag.String("output-file", "", "–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥)")

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Hugging Face
	hfEnabled := flag.Bool("hf", false, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Hugging Face Datasets (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥)")
	hfDataset := flag.String("hf-dataset", "", "–ò–º—è –¥–∞—Ç–∞—Å–µ—Ç–∞ Hugging Face (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥)")
	hfSplit := flag.String("hf-split", "", "Split –¥–ª—è –¥–∞—Ç–∞—Å–µ—Ç–∞ Hugging Face (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥)")
	hfPython := flag.String("hf-python", "", "–ü—É—Ç—å –∫ Python –¥–ª—è Hugging Face (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥)")
	hfStreamable := flag.Bool("hf-stream", false, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å streaming —Ä–µ–∂–∏–º –¥–ª—è Hugging Face (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥)")
	hfFields := flag.String("hf-fields", "", "–°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ Hugging Face (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥)")
	hfLimit := flag.Int("hf-limit", 0, "–õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è Hugging Face (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥)")
	hfOffset := flag.Int("hf-offset", 0, "–°–º–µ—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è Hugging Face (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥)")
	hfShuffle := flag.Bool("hf-shuffle", false, "–ü–µ—Ä–µ–º–µ—à–∞—Ç—å –∑–∞–ø–∏—Å–∏ Hugging Face (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥)")
	hfSeed := flag.Int("hf-seed", 42, "Seed –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥)")
	hfFilter := flag.String("hf-filter", "", "–§–∏–ª—å—Ç—Ä—ã –¥–ª—è Hugging Face –≤ —Ñ–æ—Ä–º–∞—Ç–µ key=value,key2=value2 (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥)")

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
	maxConcurrency := flag.Int("concurrency", 0, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥)")
	temperature := flag.Float64("temperature", 0.0, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥)")
	noLLM := flag.Bool("no-llm", false, "–ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ LLM, —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞—Ç–∞—Å–µ—Ç")
	debug := flag.Bool("debug", false, "–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
	filterEnabled := flag.Bool("filter", false, "–í–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥)")
	filterField := flag.String("filter-field", "", "–ü–æ–ª–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥)")
	filterMinValue := flag.Float64("filter-min", 0.0, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥)")
	filterMaxValue := flag.Float64("filter-max", 0.0, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥)")
	filterOperator := flag.String("filter-op", "", "–û–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (eq, lt, gt, etc.) (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥)")

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–º–ø—Ç–∞
	systemPrompt := flag.String("system-prompt", "", "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥)")

	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥–∞
	generateConfig := flag.Bool("generate-config", false, "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥–∞")

	// –†–∞–∑–±–æ—Ä –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	flag.Parse()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥–∞
	if *generateConfig {
		generateExampleConfig()
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
	fmt.Println(green("  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó"))
	fmt.Println(green("  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë"))
	fmt.Println(green("  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë"))
	fmt.Println(green("  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë  ‚ïö‚ñà‚ñà‚ïî‚ïù  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë"))
	fmt.Println(green("  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë"))
	fmt.Println(green("  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù"))
	fmt.Println()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
	s := spinner.New(spinner.CharSets[11], 100*time.Millisecond)
	s.Suffix = " –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
	s.Color("cyan")
	s.Start()

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	var config *models.Config
	var err error

	if *configFile != "" {
		config, err = models.LoadConfigFromFile(*configFile)
		if err != nil {
			s.Stop()
			fmt.Printf("%s –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v\n", red("‚úó"), err)
			os.Exit(1)
		}
	} else {
		config = models.DefaultConfig()
	}

	// –¢—É—Ç –∂–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–º —Å–ø–∏–Ω–Ω–µ—Ä
	s.Stop()

	// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
	if *baseURL != "" {
		config.API.BaseURL = *baseURL
	}
	if *apiKey != "" {
		config.API.APIKey = *apiKey
	}
	if *model != "" {
		config.API.Model = *model
	}
	if *inputFile != "" {
		config.IO.InputFile = *inputFile
	}
	if *outputDir != "" {
		config.IO.OutputDir = *outputDir
	}
	if *outputFile != "" {
		config.IO.OutputFile = *outputFile
	}
	if *maxConcurrency > 0 {
		config.Processing.MaxConcurrency = *maxConcurrency
	}
	if *temperature > 0.0 {
		config.Processing.Temperature = *temperature
	}
	if *systemPrompt != "" {
		config.Prompt.System = *systemPrompt
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
	if *filterEnabled {
		config.Processing.Filter.Enabled = true
	}
	if *filterField != "" {
		config.Processing.Filter.Field = *filterField
	}
	if *filterMinValue != 0.0 {
		config.Processing.Filter.MinValue = *filterMinValue
	}
	if *filterMaxValue != 0.0 {
		config.Processing.Filter.MaxValue = *filterMaxValue
	}
	if *filterOperator != "" {
		config.Processing.Filter.Operator = *filterOperator
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Hugging Face
	if *hfEnabled {
		config.HuggingFace.Enabled = true
	}
	if *hfDataset != "" {
		config.HuggingFace.DatasetName = *hfDataset
	}
	if *hfSplit != "" {
		config.HuggingFace.Split = *hfSplit
	}
	if *hfPython != "" {
		config.HuggingFace.PythonPath = *hfPython
	}
	if *hfStreamable {
		config.HuggingFace.Streamable = true
	}
	if *hfFields != "" {
		config.HuggingFace.Fields = strings.Split(*hfFields, ",")
	}
	if *hfLimit > 0 {
		config.HuggingFace.Limit = *hfLimit
	}
	if *hfOffset > 0 {
		config.HuggingFace.Offset = *hfOffset
	}
	if *hfShuffle {
		config.HuggingFace.Shuffle = true
	}
	if *hfSeed != 42 {
		config.HuggingFace.Seed = *hfSeed
	}
	if *hfFilter != "" {
		// –ü–∞—Ä—Å–∏–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ key=value,key2=value2
		filters := make(map[string]interface{})
		filterPairs := strings.Split(*hfFilter, ",")
		for _, pair := range filterPairs {
			kv := strings.SplitN(pair, "=", 2)
			if len(kv) == 2 {
				filters[kv[0]] = kv[1]
			}
		}
		if len(filters) > 0 {
			config.HuggingFace.Filters = filters
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	if !config.HuggingFace.Enabled && config.IO.InputFile == "" {
		fmt.Printf("%s –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º (—á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥ –∏–ª–∏ —Ñ–ª–∞–≥ -input) –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º Hugging Face (-hf)\n", red("‚úó"))
		os.Exit(1)
	}

	if config.HuggingFace.Enabled && config.HuggingFace.DatasetName == "" {
		fmt.Printf("%s –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –¥–∞—Ç–∞—Å–µ—Ç–∞ Hugging Face (—á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥ –∏–ª–∏ —Ñ–ª–∞–≥ -hf-dataset)\n", red("‚úó"))
		os.Exit(1)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã
	if config.Processing.MaxConcurrency <= 0 {
		config.Processing.MaxConcurrency = runtime.NumCPU()
	}
	if config.IO.OutputFile == "" {
		config.IO.OutputFile = "dataset.json"
	}
	if config.IO.OutputDir == "" {
		config.IO.OutputDir = "output"
	}

	// –í—ã–≤–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	fmt.Println(green("üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞:"))
	fmt.Println()

	// API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	if *noLLM {
		fmt.Printf("  %s %s\n", cyan("API URL:"), red("NULL"))
		fmt.Printf("  %s %s\n", cyan("–ú–æ–¥–µ–ª—å:"), red("NULL"))
		fmt.Printf("  %s %s\n", cyan("–†–µ–∂–∏–º –±–µ–∑ LLM:"), yellow("‚úÖ –í–∫–ª—é—á–µ–Ω"))
	} else {
		fmt.Printf("  %s %s\n", cyan("API URL:"), config.API.BaseURL)
		fmt.Printf("  %s %s\n", cyan("–ú–æ–¥–µ–ª—å:"), config.API.Model)
		fmt.Printf("  %s %.2f\n", cyan("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:"), config.Processing.Temperature)
	}

	// –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
	if config.HuggingFace.Enabled {
		fmt.Println()
		fmt.Printf("  %s %s\n", cyan("–ò—Å—Ç–æ—á–Ω–∏–∫:"), green("Hugging Face"))
		fmt.Printf("  %s %s\n", cyan("–î–∞—Ç–∞—Å–µ—Ç:"), config.HuggingFace.DatasetName)
		fmt.Printf("  %s %s\n", cyan("–°–ø–ª–∏—Ç:"), config.HuggingFace.Split)

		if config.HuggingFace.Limit > 0 {
			fmt.Printf("  %s %d\n", cyan("–õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π:"), config.HuggingFace.Limit)
		}
		if config.HuggingFace.Offset > 0 {
			fmt.Printf("  %s %d\n", cyan("–°–º–µ—â–µ–Ω–∏–µ:"), config.HuggingFace.Offset)
		}
		if config.HuggingFace.Shuffle {
			fmt.Printf("  %s %s (seed: %d)\n", cyan("–ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ:"), green("–í–∫–ª—é—á–µ–Ω–æ"), config.HuggingFace.Seed)
		}
		if len(config.HuggingFace.Fields) > 0 {
			fmt.Printf("  %s %s\n", cyan("–ü–æ–ª—è:"), strings.Join(config.HuggingFace.Fields, ", "))
		}
		if config.Processing.Filter.Enabled {
			fmt.Printf("  %s %s %s %.1f\n",
				cyan("–§–∏–ª—å—Ç—Ä:"),
				config.Processing.Filter.Field,
				config.Processing.Filter.Operator,
				config.Processing.Filter.MinValue)
		}
	} else {
		fmt.Println()
		fmt.Printf("  %s %s\n", cyan("–ò—Å—Ç–æ—á–Ω–∏–∫:"), yellow("–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª"))
		fmt.Printf("  %s %s\n", cyan("–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª:"), config.IO.InputFile)
	}

	// –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	fmt.Println()
	fmt.Printf("  %s %s\n", cyan("–í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:"), config.IO.OutputDir)
	fmt.Printf("  %s %s\n", cyan("–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª:"), config.IO.OutputFile)

	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
	fmt.Println()
	fmt.Printf("  %s %d\n", cyan("–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:"), config.Processing.MaxConcurrency)

	if !*noLLM {
		fmt.Printf("  %s %s\n", cyan("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:"), truncateString(config.Prompt.System, 50))
	} else {
		config.Processing.NoLLM = true
	}

	if *debug {
		config.Debug = true
		fmt.Printf("  %s %s\n", cyan("–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏:"), yellow("‚úÖ –í–∫–ª—é—á–µ–Ω"))
	}

	fmt.Println()

	// –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç API
	llmClient := client.NewLLMClient(config.API.BaseURL, config.API.APIKey)

	// –°–æ–∑–¥–∞—ë–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞
	datasetGenerator := generator.NewDatasetGenerator(config, llmClient)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
	startTime := time.Now()
	if err := datasetGenerator.Run(context.Background()); err != nil {
		fmt.Printf("\n%s %v\n", red("‚ùå –û—à–∏–±–∫–∞:"), err)
		os.Exit(1)
	}

	elapsed := time.Since(startTime)
	fmt.Printf("\n%s %s\n", green("‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:"), formatDuration(elapsed))
}

// formatDuration –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
func formatDuration(d time.Duration) string {
	// –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Å–µ–∫—É–Ω–¥
	d = d.Round(time.Second)

	h := d / time.Hour
	d -= h * time.Hour
	m := d / time.Minute
	d -= m * time.Minute
	s := d / time.Second

	if h > 0 {
		return fmt.Sprintf("%d—á %d–º %d—Å", h, m, s)
	}
	if m > 0 {
		return fmt.Sprintf("%d–º %d—Å", m, s)
	}
	return fmt.Sprintf("%d—Å", s)
}

// generateExampleConfig –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
func generateExampleConfig() {
	config := models.DefaultConfig()

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–π –ø—Ä–∏–º–µ—Ä
	config.API.BaseURL = "http://0.0.0.0:8000/v1"
	config.API.APIKey = "token-abc123"
	config.API.Model = "t-tech/T-pro-it-1.0"

	config.IO.InputFile = "input.json"
	config.IO.OutputDir = "output"
	config.IO.OutputFile = "dataset.json"

	config.Processing.MaxConcurrency = runtime.NumCPU()
	config.Processing.Temperature = 0.6

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
	config.Processing.Filter.Enabled = true
	config.Processing.Filter.Field = "difficulty"
	config.Processing.Filter.MinValue = 8
	config.Processing.Filter.Operator = "gte"

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Hugging Face
	config.HuggingFace.Enabled = true
	config.HuggingFace.PythonPath = "python3"
	config.HuggingFace.DatasetName = "zwhe99/DeepMath-103K"
	config.HuggingFace.Split = "train"
	config.HuggingFace.Fields = []string{"question", "final_answer", "r1_solution_3", "difficulty"}
	config.HuggingFace.Shuffle = true
	config.HuggingFace.Seed = 42
	config.HuggingFace.Limit = 1000
	config.HuggingFace.Offset = 0

	// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã HF
	config.HuggingFace.Filters = map[string]interface{}{
		"language": "English",
	}

	// –≠–∫—Å—Ç—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
	config.HuggingFace.ExtraArgs = map[string]string{
		"local_dir": "./cache",
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
	config.Prompt.System = `
–¢–µ–±–µ –±—É–¥—É—Ç –¥–∞–Ω—ã –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∑–∞–¥–∞—á–∏ –∏–ª–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏—Ö –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.
–¢—ã –î–û–õ–ñ–ï–ù —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Å–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è, –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ —Å–∏–º–≤–æ–ª—ã (–≤–∫–ª—é—á–∞—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ)
—Ç–∞–∫, –∫–∞–∫ –æ–Ω–∏ –Ω–∞–ø–∏—Å–∞–Ω—ã –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ (–ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏). –¢–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º –∏ –ª–æ–≥–∏—á–Ω—ã–º.
–ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ, –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–µ—à–∞–π –∏ –Ω–µ –æ–±—ä—è—Å–Ω—è–π, —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥–∏. 
–ï—Å–ª–∏ —Ç–µ–±–µ –¥–∞—é—Ç –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –∏–ª–∏ LaTeX –≤—ã—Ä–∞–∂–µ–Ω–∏–µ - –≤–æ–∑–≤—Ä–∞—â–∞–π –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å.
`

	// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª–µ–π
	config.Fields.Input = []models.FieldMapping{
		{
			InputField:  "question",
			OutputField: "problem",
			ProcessorID: "llm",
		},
		{
			InputField:  "final_answer",
			OutputField: "answer",
			ProcessorID: "llm",
		},
		{
			InputField:  "r1_solution_3",
			OutputField: "reflection",
			ProcessorID: "llm",
		},
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ —Ñ–∞–π–ª
	if err := config.SaveToFile("config_example.json"); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥–∞: %v", err)
	}

	fmt.Println("–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ config_example.json")
}

// truncateString —Å–æ–∫—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã, –¥–æ–±–∞–≤–ª—è—è –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
func truncateString(s string, maxLen int) string {
	s = strings.TrimSpace(s)
	if len(s) <= maxLen {
		return s
	}
	return s[:maxLen-3] + "..."
}
